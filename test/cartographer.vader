Given (a <expr> mapping with a non-expanded termcode):
  text
Before:
  nnoremap <expr> gs ":<C-U>s/x/s/<CR>"
  "                    ^ no backslash
  lua require("cartographer").clear()
  CartographerDontSave
  CartographerHook! mapping gs
Do (trigger the map):
  gs
Then (assert map is used):
  let uses = luaeval('require("cartographer").uses("mapping", "gs")')
  Assert uses == 1
Expect (changed text):
  test

Given (a <expr> mapping with an expanded termcode):
  text
Before:
  nnoremap <expr> gs ":\<C-U>s/x/s/<CR>"
  "                    ^
  lua require("cartographer").clear()
  CartographerDontSave
  CartographerHook! mapping gs
Do (trigger the map):
  gs
Then (assert map is used):
  let uses = luaeval('require("cartographer").uses("mapping", "gs")')
  Assert uses == 1
Expect (changed text):
  test

Given (a non-expr mapping with a termcode):
  text
Before:
  nnoremap R <Left>
  lua require("cartographer").clear()
  CartographerDontSave
  CartographerHook mapping R
Do (trigger the map):
  $Rihi
Then (assert map is used):
  let uses = luaeval('require("cartographer").uses("mapping", "R")')
  Assert uses == 1
Expect (changed text):
  tehixt

Given (a mapping containing <lt>):
  paragraph
  entry
  
  hello
Before:
  nnoremap a< >ip
  setl et ts=2 sw=0
  lua require("cartographer").clear()
  CartographerDontSave
  CartographerHook! mapping a<lt>
Do (trigger the map):
  a<
Then (assert map is used):
  let uses = luaeval('require("cartographer").uses("mapping", "a<lt>")')
  Assert uses == 1
Expect (changed text):
    paragraph
    entry
  
  hello

Given (an operator-pending mapping):
  text
  text2
  text3
Before:
  onoremap il :<C-U>normal! v0o$<CR>
  lua require("cartographer").clear()
  CartographerDontSave
  CartographerHook! mapping il
Do (trigger the map):
  jdil
Then (assert map is used):
  let uses = luaeval('require("cartographer").uses("mapping", "il")')
  Assert uses == 1
Expect (changed text):
  text
  
  text3

Given (a <Plug> mapping):
  text
# we don't wrap the <Plug> mapping, but we still trigger it via another
Before:
  nnoremap <Plug>(aplug) :<C-U>s/x/s/<CR>
  nnoremap doit <Plug>(aplug)
  lua require("cartographer").clear()
  CartographerDontSave
  " this won't hook:
  "CartographerHook! mapping <Plug>(aplug)
  " this will hook:
  CartographerHook! mapping doit
Do (trigger the map):
  doit
Then (assert map is used):
  let uses = luaeval('require("cartographer").uses("mapping", "doit")')
  Assert uses == 1
Expect (changed text):
  test

Given (a <silent> mapping):
  text
# we install a <Plug> mapping to preserve <silent>, ensure it is triggered
Before:
  nnoremap <silent> abc :<C-U>s/x/s/<CR>
  lua require("cartographer").clear()
  CartographerDontSave
  CartographerHook! mapping abc
Do (trigger the map):
  abc
Then (assert map is used):
  let uses = luaeval('require("cartographer").uses("mapping", "abc")')
  Assert uses == 1
Expect (changed text):
  test

Given (an attempt to hook a <Plug> mapping):
  text
Before:
  nnoremap <Plug>(abc) xyz
  lua require("cartographer").clear()
  CartographerDontSave
Execute (attempt to hook it, assert error):
  let caught = 0
  try
    CartographerHook! mapping <Plug>(abc)
  catch /can't hook mapping/
    let caught = 1
  endtry
  Assert caught

Given (a command with a literal '<'):
  line0
  line1
Before:
  command! -bang WithLt normal<bang> $Cend
  lua require("cartographer").clear()
  CartographerDontSave
  CartographerHook! command WithLt
Do (run the command):
  :WithLt\<CR>j:WithLt!\<CR>
Then (assert command is used):
  let uses = luaeval('require("cartographer").uses("command", "WithLt")')
  Assert uses == 2
Expect (changed text):
  lineend
  lineend
